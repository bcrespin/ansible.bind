---
- name: create blackhole folder
  file: path={{ bind_directory }}/{{ bind_blackhole_folder }}  owner=root group={{ root_group }} mode=755 state=directory 

- name: generate blackhole zonefile
  template: src=blackholedomain.fake.zone.j2 dest={{ bind_directory }}/{{ bind_blackhole_folder }}/{{ bind_blackhole_zonefile }} owner=root group={{ root_group }} mode=644

- name: generate blackhole download script
  template: src=blackholeupdate.sh.j2  dest={{ bind_directory }}/{{ bind_blackhole_folder }}/blackholeupdate.sh owner=root group={{ root_group }} mode=750 

- name: touch backhole domain list file
  file: path={{ bind_directory }}/{{ bind_blackhole_folder }}/{{ bind_blackhole_include_zones }} state=touch owner=root group={{ root_group }} mode=0644
 
- name: create additional folders
  file: path={{ bind_directory }}/{{ item }} owner={{ bind_user }} group={{ bind_group }} mode=0755 state=directory
  with_items: ['logs','{{ bind_config_dynamic_zones_path }}','{{ bind_config_slave_zones_path }}','{{ bind_config_standard_zones_path }}' ]

- name: named.conf file
  template: src=named.conf.j2 dest={{ bind_config_fullpath }}
  notify: service reload
  register: result

- name: create standard zones
  template: src={{ item.template }} dest={{ bind_directory }}/{{ bind_config_standard_zones_path }}/{{ item.target }}
  when: "{{ item.enabled }}"
  with_items:
    - { template: "localhost_zone.j2", target: "localhost.db",  enabled: "{{ bind_zone_localhost_enable }}"  }
    - { template: "loopback_v4_zone.j2", target: "loopback_v4.db", enabled: "{{ bind_zone_loopback_v4_enable }}" }
    - { template: "loopback_v6_zone.j2", target: "loopback_v6.db", enabled: "{{ bind_zone_loopback_v6_enable }}" }

- name: create unmanaged by ansible  zone files
  template:
    src: basic_zone.db.j2
    dest: "{{ bind_directory }}/{{ bind_config_dynamic_zones_path if item.dynamic|default(false) else  bind_config_master_zones_path }}/{{ item.name }}.db"
    force: no
    owner: "{{ bind_user }}"
    group: "{{ bind_group }}"
  with_items: "{{ bind_zones }}"
  when: 
    - item.managed|default(false) == false
    - item.type == "master"
  notify: service reload
  no_log: true

- name: create or update include zone datas
  template:
    src: zone_include.j2
    dest: "{{ bind_directory }}/{{ bind_config_master_zones_path }}/{{ item.name }}_ansible_include"
    owner: root
    group: "{{ root_group }}"
  with_items: "{{ bind_zones }}"
  when: item.managed|default(false)
  register: res
  notify: service reload
  no_log: true

- name: list zones that are updated
  set_fact:
    zones_to_update: "{{ zones_to_update + [ item.item.name] }}"
  when: "{{item.changed == true}}"
  with_items: "{{ res.results }}"
  no_log: true

- name: debug zones_to_update
  debug: var=zones_to_update

- name: create zone file list to be updated
  set_fact:
     zone_file_list_to_update: "{{ zone_file_list_to_update|default([]) + [  bind_directory +'/' + bind_config_master_zones_path +'/'+ item +'.db' ] }}"
  with_items: "{{ zones_to_update }}"
  when: zones_to_update != []

- name: get zone serial for zones need to be updated by ansible
  get_zone_serial: file_zone='{{ zone_file_list_to_update }}'
  when: zones_to_update != []

- name: update zone file
  template: src=zone_managed.j2 dest={{ bind_directory }}/{{ bind_config_master_zones_path }}/{{ item[1] }}.db mode=0644 owner=root  group={{ root_group }}
  with_nested:
    - "{{ bind_zones }}"
    - "{{ zones_to_update }}"
  when:
    - zones_to_update != []
    - "{{ item[0].name == item[1] }}"
  no_log: true

- name: ensure service started
  service: name={{ bind_service_name }} state=started enabled=yes
  when: result.changed == false
